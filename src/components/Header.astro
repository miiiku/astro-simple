---
import { SITE_TITLE, SITE_MENU } from "../consts"

import LogoIcon from "./icons/logo.astro"
import SearchIcon from "./icons/search.astro"
import MenuCloseAnimIcon from "./icons/MenuCloseAnimIcon.astro"

import SystemThemeIcon from "./icons/themeSystem.astro"
import CustomThemeAnim from "./CustomThemeAnim.astro"

const { pathname } = Astro.url
---
<header class="w-full sticky top-0 py-2 border-b theme-border shadow-sm after:theme-bg/80 after:absolute after:inset-0 after:backdrop-blur after:backdrop-saturate-150">
  <div class="mx-auto w-full max-w-5xl px-6 relative z-10 flex flex-row justify-between items-center py-3">
    <a href="/" class="flex gap-2 items-center font-bold text-2xl theme-text-stress">
      <div class="w-9 h-9">
        <LogoIcon width="100%" height="100%" />
      </div>
      <h1>{ SITE_TITLE }</h1>
    </a>

    <nav>
      <button id="mobile-menu--btn" class="mobile:block hidden w-9 h-9 p-2 rounded-md border theme-border theme-text-stress hover:theme-text-hover active:bg-zinc-100">
        <MenuCloseAnimIcon key="mobile-menu--icon" width="100%" height="100%" />
      </button>
      <ul class="mobile:hidden flex gap-5 items-center justify-between theme-text-stress">
        { SITE_MENU.map(menu => <li><a class={`font-bold hover:theme-text-hover px-2 py-1 ${ menu.url === pathname ? "underline decoration-wavy decoration-2 underline-offset-4" : "" }`} href={menu.url}>{menu.title}</a></li>) }
        <li>
          <button id="desktop-search--btn" class="w-9 h-9 p-2 rounded-md border border-transparent hover:theme-border hover:theme-text-hover active:bg-zinc-100" title="search"><SearchIcon width="100%" height="100%" /></button>
        </li>
        <li class="overflow-hidden">
          <CustomThemeAnim id="desktop-theme--btn" mode="desktop" class="block w-9 h-9" />
        </li>
        <li>
          <button id="desktop-theme-auto--btn" class="w-9 h-9 p-2 rounded-md border border-transparent hover:theme-border hover:theme-text-hover active:bg-zinc-100" title="auto theme"><SystemThemeIcon width="100%" height="100%" /></button>
        </li>
      </ul>
    </nav>
  </div>

  <ul id="mobile-menu--panel" class="hidden gap-5 py-4 flex-col items-center justify-between theme-text-stress relative z-10">
    { SITE_MENU.map(menu => <li class="mobile-menu-link opacity-0 translate-x-2"><a class={`font-bold hover:theme-text-hover px-2 py-1 ${ menu.url === pathname ? "underline decoration-wavy decoration-2 underline-offset-4" : "" }`} href={menu.url}>{menu.title}</a></li>) }
    <li class="flex gap-3 items-center justify-center">
      <button id="mobile-search--btn" class="mobile-menu--btn w-9 h-9 opacity-0 scale-50 p-2 rounded-md border theme-border hover:theme-text-hover active:bg-zinc-100">
        <SearchIcon width="100%" height="100%" title="search" />
      </button>
      <div class="overflow-hidden mobile-menu--btn opacity-0 scale-50">
        <CustomThemeAnim id="mobile-theme--btn" mode="mobile" class="block w-9 h-9" />
      </div>
      <button id="mobile-theme-auto--btn" class="mobile-menu--btn w-9 h-9 opacity-0 scale-50 p-2 rounded-md border theme-border hover:theme-text-hover active:bg-zinc-100">
        <SystemThemeIcon width="100%" height="100%" title="auto theme" />
      </button>
    </li>
  </ul>
</header>

<style>
  #mobile-menu--panel.open {
    @apply mobile:flex;
  }
</style>

<script>
  import gsap from "gsap";
  
  let desktopThemeBtn:any = undefined;
  let mobileThemeBtn:any = undefined;
  let mobileMenuPanel:any = undefined;

  let mobileMenuLinkTween:gsap.core.Tween | null = null;
  let mobileMenuBtnTween:gsap.core.Tween | null = null;

  const toggleMobileMenu = () => {
    if (mobileMenuPanel) {
      mobileMenuPanel.classList.toggle("open");
      if (mobileMenuPanel.classList.contains("open")) {
        /** open */
        mobileMenuLinkTween && mobileMenuLinkTween.restart();
        mobileMenuBtnTween && mobileMenuBtnTween.restart();
        document.querySelector("[key=mobile-menu--icon]")?.setAttribute("active", "");
      } else {
        /** close */
        document.querySelector("[key=mobile-menu--icon]")?.removeAttribute("active");
      }
    }
  }

  const clearTheme = () => {
    desktopThemeBtn?.clearTheme();
    mobileThemeBtn?.clearTheme();
  }

  document.addEventListener("astro:page-load", () => {
    /** 重新获取DOM元素 */
    desktopThemeBtn = document.querySelector("#desktop-theme--btn") as any;
    mobileThemeBtn = document.querySelector("#mobile-theme--btn") as any;
    mobileMenuPanel = document.querySelector("#mobile-menu--panel");
    
    /** 重新绑定动画 */
    mobileMenuLinkTween = gsap.to(".mobile-menu-link", {
      x: 0,
      opacity: 1,
      duration: 0.3,
      stagger: 0.2,
    }).pause();

    mobileMenuBtnTween = gsap.to(".mobile-menu--btn", {
      scale: 1,
      opacity: 1,
      duration: 0.3,
      stagger: 0.2,
    }).pause();

    /** 重新绑定移动端切换菜单事件 */
    document.querySelector("#mobile-menu--btn")?.addEventListener("click", toggleMobileMenu);
    /** 重新绑定选中系统主题后清空主题按钮当前选中状态 */
    document.querySelector("#desktop-theme-auto--btn")?.addEventListener("click", clearTheme)
    document.querySelector("#mobile-theme-auto--btn")?.addEventListener("click", clearTheme)
  });
</script>